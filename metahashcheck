#!/usr/bin/env bash
# (bash v4 required)
#
# metacheck & hashcheck - David Kotz 2019,20,21,22
# AVAILABILITY: https://github.com/dfkotz/metahashcheck
# LICENSE: see LICENSE.md
# USAGE: see README.md, and function usage() below. 
#
# Record metadata for all files in the given directory trees,
# and compare with the metadata recorded earlier.
#  - When run as 'hashcheck' it records hash & size in '.hashcheck' files;
#  - When run as 'metacheck' it records time & size in '.metacheck' files.
#
# Below "checkfiles" and "$cf" refers to .hashcheck or .metacheck files.
#  .metacheck.* and .hashcheck.* are temporary files used during operation.
#  .metacheck-* and .hashcheck-* are retained after verify for use by 'accept'.
#
# The first argument is the 'mode' - determining the action to be performed.
# In mode 'create', we create .metacheck or .hashcheck
#   to match the current reality.
# In mode 'expand', we update .metacheck or .hashcheck
#   by adding any newly added files; no changes made for existing files.
# In mode 'verify', we create .metacheck-new or .hashcheck-new
#   according to current reality, and compare them with existing checkfiles;
#   any new, changed, or missing files are noted.
# In mode 'subset', we act like 'verify' but only for a subset of files
#   listed in the corresponding .metacheck-subset or .hashcheck-subset file.
#   It is the user's responsibility to create, and later remove, those files.
# In mode 'sample', we verify only 1% of the files (spot check!);
#   it works just like 'verify' but probabilistically only 1 out of 100 files,
#   and does not create any .metacheck-new or .hashcheck-new file.
# In mode 'accept', we move .metacheck-new or .hashcheck-new to
#   replace the current checkfiles.
# In mode 'review', we quickly look to see whether any directory has
#   some files that are newer than its current checkfiles.
# In mode 'update', we add new files (like 'expand') but we also
#   alert to missing files (like 'verify'), but we do not check contents
#   of existing files.
#
# For use in Lightroom, one might also try the following plugin:
#    http://bayimages.net/blog/lightroom/validator/
#
# LIMITATIONS:
#   When the underlying directories are managed by Dropbox, the file size
# will (as of 2022) be zero when Dropbox drops it from local storage; this
# can confuse metacheck. The code may highlight files as "MIGRATED".  It also
# highlights files that Dropbox restores (thus size changing from zero to
# non-zero. The limitation is that we do not keep a record of the original
# file size, and thus metacheck will not detect the situation where Dropbox
# silently changes the file size. However, hashcheck will catch that case...
# though one must retrieve from Dropbox a folder before running hashcheck.
#

export LC_ALL=C # ensure consistent sort order with native-byte values

problems=""     # updated if errors, deletions, or changes discovered.
additions=""    # updated if additions discovered.
need2review=""  # updated during 'review' with directories needing verify.
need2accept=""  # updated in cfcompare, with list of dirs that changed.

# Functionality depends on the name of this script:
case "${0##*/}" in
hashcheck)
    progname=hashcheck
    cf=.hashcheck   # shorthand for the basename of in-directory checkfiles.
    tmp=/tmp/hashcheck$$  # another scratch file outside of working directories
    ;;
metacheck)
    progname=metacheck
    cf=.metacheck   # shorthand for the basename of in-directory checkfiles.
    tmp=/tmp/metacheck$$  # another scratch file outside of working directories
    ;;
*)
    echo "$0: must be run as script named 'hashcheck' or 'metacheck'."
    exit 1;;
esac

function usage() {
cat <<EOF
 usage:
   $progname mode dir...
 where 'mode' is one of
   create: create new records from scratch; error if prior records exist.
   expand: add new records for any newly-added files.
   verify: verify files against prior records, and report differences.
   subset: lile verify, but only verify those listed in $cf-subset files.
   sample: like verify, but only verify random 1% of files (spot check!).
   accept: replace prior records with results from a 'verify' pass.
   review: quickly review dir for presence of files newer than records.
   update: add new records (like expand) and alert to missing files.
EOF
}

# in what mode shall we operate?
case "$1" in
    "create") mode=create;;  # for the first time on a new directory
    "expand") mode=expand;;  # to add entries for newly added files
    "verify") mode=verify;;  # to scan a directory and report changes
    "subset") mode=subset;;  # to scan certain files in a directory for changes
    "sample") mode=sample;;  # to spot-check a directory for changes
    "accept") mode=accept;;  # to accept results of 'verify'
    "review") mode=review;;  # to review whether 'verify' is needed
    "update") mode=update;;  # like 'expand', but alert to missing files
    *)  usage; exit 1;;
esac
shift

# verify there is at least one argument (directory) on which to operate
if [[ $# -lt 1 ]]; then 
    usage; exit 3;
fi

# on what platform do we operate? (see cfxargs below)
platform=$(uname)
case $platform in
    Darwin)  linux=no;;
    FreeBSD) linux=no;;
    Linux)   linux=yes;;
    *)
        echo Platform $platform not supported by this command.
        exit 2;
esac

###################################################################
# A function for cleaning up our work if interrupted
function cleanall-and-exit {
    echo cleaning up temporary files...
    rm -f $tmp $tmp.* $cf-new
    exit 99
}

# this trap will only clean the current directory - not all 
trap cleanall-and-exit sigint


###################################################################
###################################################################
# next: several functions.  skip down to "main loop" below...

###################################################################
# Determine whether this file is under Dropbox control and its size
# has changed from non-zero to zero (as Dropbox removes it from local
# storage) or from zero to non-zero (as Dropbox restores it).
# Return 0 if so, non-zero otherwise.
# Parameters: pathname oldSize newSize
function dropboxSizeEffect {
    if [[ $platform != Darwin ]]; then
        # not on MacOS, thus no Dropbox
        return 1
    fi

    # extract command parameters (unquoting $1 as the pathname, in the process)
    name=$(sed -e "s/'\\\\''/'/g" -e "s/^'//" -e "s/'$//" <<<"$1")
    oldSize="$2"
    newSize="$3"

    if (( $oldSize != 0 && $newSize != 0 )); then
        # both sizes non-zero: this is not a Dropbox effect
        return 1
    fi

    if (( $oldSize == 0 && $newSize != 0 )); then
        # happens during migration out of Dropbox
        return 0
    fi

    if ls -l@ "$name" | grep -q com.dropbox ; then
        # Dropbox attributes present: this file is under Dropbox management
        return 0
    else
        # Dropbox attributes not present: no excuse for change in file size
        return 1
    fi
}

###################################################################
# A function to push null-terminated filenames, from stdin,
# through 'xargs' with a commandline appropriate to our mode of operation
# and to the platform on which we run.  This function is where
# metacheck and hashcheck actually differ!
# No arguments expected; stdin should be result of `find... -print0`.
# outputs three columns: 
# 1 checksum(hash) or last-modification-time
# 2 size in bytes
# 3 filename
function cfxargs {
    # Sadly, the 'xargs' and 'stat' commands differ between MacOS/BSD and Linux.
    # xargs: on MacOS/BSD, empty input does not run the command; on Linux, need -r.
    # stat: format with -f on MacOS/BSD and -c on Linux, with different %specifiers.
    if [ $linux == no ]
    then # MacOS or FreeBSD
        if [ $progname == hashcheck ]
        then # hashcheck
            xargs -0 cksum
        else # metacheck
            xargs -0 stat -f "%m %z %N"
        fi
    else # Linux
        if [ $progname == hashcheck ]
        then # hashcheck
            xargs -0 -r cksum
        else # metacheck
            xargs -0 -r stat -c "%Y %s %n"
        fi
    fi
}


###################################################################
# A function to list all the relevant new files in current directory;
# arguments to cflist are passed to end of 'find' command; caller should
# add argument -print or -print0 depending on desired output format.
function cflist {
    find . \( -type f -and -not -name .\* -and -not -name Icon\? \) "$@"
    return $?
}

###################################################################
# A function to create a new checkfile from existing files;
# creates $cf-new and returns 0 on success, non-zero on error.
function cfcreate {
    if cflist -print0 | cfxargs | sort --key=3 > $cf-new
    then
        return 0
    else 
        rm -f $cf-new
        return 1
    fi
}

###################################################################
# A function to extend a checkfile with additional files whose names
# are listed, one per line, in the standard input;
# creates $cf-new and returns 0 on success, non-zero on error.
function cfextend {
    if tr \\n \\000 | cfxargs | cat $cf - | sort --key=3 > $cf-new
    then
       return 0
    else 
        rm -f $cf-new
        return 1
    fi
}

###################################################################
# A function to compare a new checkfile with existing checkfile;
# expects to find $cf and $cf-new, each with three columns:
# 1 checksum(hash) or last-modification-time
# 2 size in bytes
# 3 filename
# and returns 0 on success, non-zero if any changes detected
function cfcompare {
    # quickly compare new records with existing records
    if cmp --quiet $cf $cf-new ; then
        echo NO ADDITIONS, DELETIONS, OR CHANGES.
        return 0
    fi

    # something changed, so we need to look more closely.
    echo SOMETHING CHANGED! 
    # we will later recommend accepting the new $cf for this directory.
    need2accept="$need2accept '$dir'"

    declare -i added=0 lost=0 changed=0 migrated=0 dup=0

    # load the existing checkfile into Old
    declare -A OldCol1 OldCol2
    while read col1 col2 name;
    do
        OldCol1["${name@Q}"]=$col1;
        OldCol2["${name@Q}"]=$col2;
    done < $cf
    
    # load the new checkfile into New
    declare -A NewCol1 NewCol2
    while read col1 col2 name;
    do
        NewCol1["${name@Q}"]=$col1;
        NewCol2["${name@Q}"]=$col2;
    done < $cf-new
    
    # loop over all the old files to see what disappeared or changed
    for name in "${!OldCol1[@]}"
    do
        # echo considering "${name}"
        oldValu=${OldCol1["${name}"]} # hash if hashcheck, time if metacheck
        newValu=${NewCol1["${name}"]} # hash if hashcheck, time if metacheck
        oldSize=${OldCol2["${name}"]} # file size
        newSize=${NewCol2["${name}"]} # file size

        if [[ "$newSize" == "" ]] ; then
            echo "LOST $name"
            let lost++
        elif [[ $oldSize -ne $newSize ]] ; then
            # This situation is tricky; Dropbox can change the file size
            # to zero when it flushes a file from local storage,
            # or change it to non-zero when it restores the file.
            if dropboxSizeEffect "${name}" $oldSize $newSize
            then
                # echo "MIGRATED $name"
                ## comment the following to avoid unnecessary updates
                ## of the meta/hashcheck files (but it leads to other
                ## confusing results; a more sophisticated approach is needed)
                let migrated++
            else
                echo "CHANGED $name"
                let changed++
            fi
        elif [[ $oldValu -ne $newValu ]] ; then
            # Unfortunately this comparison is skipped when the sizes differ
            # due to the Dropbox Size Effect.  It has to be skipped because
            # the hash is meaningless when the file appears to be empty.
            echo "CHANGED $name"
            let changed++
        fi
    done
    
    # loop over all the new files to see what was added
    # additions are not necessarily a problem, so don't print the names
    for name in "${!NewCol1[@]}"
    do
        oldSize=${OldCol2["${name}"]} # file size
        if [[ "$oldSize" == "" ]] ; then
            # echo "ADDED $name"
            let added++
        fi
    done

    if [[ $added -gt 0 ]]; then
        echo "ADDED $added files"
        additions+=" '$dir': $added files added;"
    fi
    if [[ $changed -gt 0 ]]; then
        problems+=" '$dir': $changed files changed;"
    fi
    if [[ $lost -gt 0 ]]; then
        problems+=" '$dir': $lost files lost;"
    fi
    if [[ $migrated -gt 0 ]]; then
        problems+=" '$dir': $migrated files migrated;"
    fi
    
    # return number of files added, changed, lost, migrated or duplicated
    echo $added added + $changed changed + $lost lost + $migrated migrated
    return $(( $added + $changed + $lost + $migrated ))
}

###################################################################
# Execute mode 'create' in current working directory.
# Required for the first pass over a new directory, to compute records 
# of all files in the directory tree, and create $cf file.
function mode-create {
    if [[ -f $cf ]]; then
        # don't overrwrite an existing checkfile
        echo "error: $cf already exists for '$dir'"
        echo "skipping '$dir'..."
        problems+=" '$dir': $hc already exists;"
        return 1
    fi
    
    if cfcreate; then
        # save the new file
        mv -f $cf-new $cf
        echo "created $cf for directory '$dir'"
        return 0
    else
        problems+=" '$dir': cfcreate failed;"
        return 1
    fi
}

###################################################################
# Execute either mode 'expand' or 'update' in current working directory.
# This extends the current $cf file with new records for any new files;
# it also produces a list of misisng files, like in mode-verify.
# It does not verify or re-compute records for existing files.
# Assumes caller has verified ./$cf exists.
function mode-expandupdate {
    # first, make a list of filenames in the directory
    if ! ( cflist -print | sort > $tmp.new ); then
        echo "trouble listing files... giving up on '$dir'"
        problems+=" '$dir': trouble;"
        rm -f $tmp.*
        return 1
    fi

    # next, make a list of filenames in $cf, by stripping off first two numbers
    sed 's/^[0-9]* [0-9]* //' $cf | sort > $tmp.old

    # now compare the two lists, to find filenames that are not in $cf
    comm -13 $tmp.old $tmp.new > $tmp.add
    # count the number of additional files
    added=$(cat $tmp.add | wc -l)
    if [ $added -gt 0 ]; then
        # some files to be added
        if cfextend < $tmp.add; then
            echo ADDED $added files.
            # save the new file
            mv -f $cf-new $cf
            additions+=" '$dir': $added files added;"
            result=0
        else
            echo FAILED in adding $added files...
            problems+=" '$dir': cfextend failed;"
            result=1
        fi
    else
        # no files exist that are not already listed in $cf
        echo "no new files to be added."
        result=0
    fi

    # unless we're in update mode, we're done
    if [ $mode != "update" ]; then
        rm -f $tmp.*
        return $result
    fi

    # now compare the two lists, to find filenames that disappeared
    comm -23 $tmp.old $tmp.new > $tmp.lost
    # count the number of lost files
    lost=$(cat $tmp.lost | wc -l)
    if [ $lost -gt 0 ]; then
	# we lost some files, and need to remove them from $cf;
	# build an awk script to help us do that.
	echo  > $tmp.awk 'BEGIN { while(getline < LOST) { lost[$0] = 1 } }'
	echo >> $tmp.awk '{'
	echo >> $tmp.awk ' fname=$0; sub(/[0-9]* [0-9]* /, "", fname);'
	echo >> $tmp.awk ' if (fname in lost)'
	echo >> $tmp.awk '      { print "LOST", fname }'
	echo >> $tmp.awk ' else { print  > "/dev/stderr" }'
	echo >> $tmp.awk '}'
	# notice how the awk script passes non-lost files to stderr,
	# but prints warning messages to stdout (as do we in this script).

	# create $cf-new so the user can later 'accept' these changes:
	awk -f $tmp.awk -v LOST=$tmp.lost < $cf 2> $cf-new

	# we will later recommend accepting the new $cf for this directory.
	need2accept="$need2accept '$dir'"
	problems+=" '$dir': $lost files lost;"
	result=1
    fi

    rm -f $tmp.*
    return $result
}

###################################################################
# Execute mode 'expand' in current working directory.
# This extends the current $cf file with new records for any new files.
# It does not verify or re-compute records for existing files.
# Assumes caller has verified ./$cf exists.
function mode-expand {
    echo "expanding '$dir' by looking for new files"
    mode-expandupdate
    return $?
}

###################################################################
# Execute mode 'update' in current working directory.
# This extends the current $cf file with new records for any new files;
# it also produces a list of misisng files, like in mode-verify.
# It does not verify or re-compute records for existing files.
# Assumes caller has verified ./$cf exists.
function mode-update {
    echo "updating '$dir' by looking for new or missing files"
    mode-expandupdate
    return $?
}

###################################################################
# Execute mode 'verify' in current working directory.
# This time-consuming pass computes new records for all the files
# in the directory tree, and compares them against the pre-existing
# records in $cf.  If there are any differences, it leaves behind $cf-new;
# later, if the user decides to accept the changes, the user should
# run again with mode 'accept'.
# Assumes caller has verified ./$cf exists.
function mode-verify {
    if cfcreate; then
        if cfcompare; then
            # no changes, no need for later 'accept', don't keep $cf-new
            rm -f $cf-new
            return 0
        else
            # some changes were noted (but cfcompare adds notes to $problems)
            # problems+=" '$dir': cfcompare found differences;"
            return 1
        fi
    else
        problems+=" '$dir': cfcreate failed;"
        return 2
    fi
}

###################################################################
# Execute mode 'subset' in current working directory.
# This mode expect to find a file $cf-subset, adjacent to $cf, containing
# a list of filenames (one per line) that should be verified.  Thus, it acts
# like 'verify' but only processes the subset listed in $cf-subset, for
# efficiency.  Just like 'verify' it prepares file $cf-new that can later
# be accepted by mode 'accept'.  This mode is useful for hashcheck when
# it is expected that a handful of files have been modified, requiring
# the .hashcheck file to be updated ... but without the expnse of hashing all
# the files in the directory.
# Assumes caller has verified ./$cf exists; checks whether ./$cf-subset exists.
function mode-subset {
    if [ ! -r $cf-subset ]; then
        problems+=" '$dir': missing (or unreadable) file $cf-subset;"
        return 1
    fi

    # build an awk script to help us out
    echo > $tmp.awk '
    BEGIN {
        # expect command-line to define variable SUBSETFILE
        while (getline line < SUBSETFILE) {
              # build associative array of lines from that file
              subset[line] = 1;
        }
        close(SUBSETFILE);
    }
    {   # for every line of stdin,
        # extract the filename from the line by removing leading integers
        filename=$0;
        sub(/[0-9]* [0-9]* /, "", filename);

        # if it is not in the subset list of files, print the line
        if (! (filename in subset)) print;
    }'

    # use the awk script to extract complementary subsets of $cf
    if awk -v SUBSETFILE=$cf-subset -f $tmp.awk < $cf > $tmp.excluded
    then
        true
    else
        problems+=" '$dir': awk failed;"
        return 1
    fi

    # process that list of files to create new $cf lines for that subset
    if cat $cf-subset | tr \\n \\000 | cfxargs | sort --key=3 > $tmp.new
    then
        # then merge those lines with untouched lines to make $cf-new
        sort --key=3 $tmp.new $tmp.excluded > $cf-new
    else
        problems+=" '$dir': cfxargs failed;"
        return 2
    fi

    # determine (and report) what changed, so user can confirm
    if cfcompare; then
        # no changes, no need for later 'accept', don't keep $cf-new
        rm -f $cf-new
        return 0
    else
        # as expected, changes were noted (cfcompare adds notes to $problems)
        return 0
    fi
}

###################################################################
# Execute mode 'sample' in current working directory.
# This works like mode 'verify' except we split the existing $cf file into
# two parts: 1% to be checked, and 99% to be ignored. In this early draft,
# we do not produce a $cf-new file.
# Assumes caller has verified ./$cf exists.
function mode-sample {
    # extract a random 1% sample of lines from the $cf file
    awk 'BEGIN {srand()} { if (rand() <= 0.01) { print } }' $cf > $tmp.old

    if [ ! -s $tmp.old ]; then
        # subset is empty: can happen when $cf has few lines
        return 0
    fi

    # extract filenames from those $cf lines, and compute meta/hash info
    sed 's/^[0-9]* [0-9]* //' $tmp.old | tr \\n \\0 | cfxargs > $tmp.new

    # compare the results with the extracted $cf lines
    if cmp --quiet $tmp.old $tmp.new; then
        echo SPOT CHECK $(wc -l < $tmp.old) files: passed.
        rm -f $tmp.old $tmp.new
        return 0
    else
        echo SPOT CHECK $(wc -l < $tmp.old) files: FAILED.
        problems+=" '$dir': spot-check found differences;"
        problems+=$(diff $tmp.old $tmp.new)
        rm -f $tmp.old $tmp.new
        return 1
    fi
}

###################################################################
# Execute mode 'accept' in current working directory.
# Assuming a 'verify' pass has been run recently on this directory,
# leaving a $cf-new file behind, this 'accept' pass simply
# overwrites $cf with $cf-new.
# Assumes caller has verified ./$cf exists.
function mode-accept {
    # can't accept if there is not a new checkfile
    if [[ ! -f $cf-new ]]; then
        echo "error: $cf-new missing for '$dir'"
        echo "perhaps because you did not run 'verify' first."
        echo "to create, $0 verify '$dir'"
        echo "skipping '$dir'..."
        problems+=" '$dir': missing $cf-new;"
        return 1
    fi
    
    echo updating $cf...
    mv -f $cf-new $cf
    return 0
}


###################################################################
# Execute mode 'review' in current working directory.
# This scans the directory to see if there are any subdirectories
# or files that are newer than the $cf file.  If so, that's 
# a clear sign that the directory needs mode 'verify'.  The main script
# outputs a suggested commandline.
# Assumes caller has verified ./$cf exists.
function mode-review {
    echo "reviewing '$dir' for files newer than $cf..."
    if ! newer=$(cflist -newer $cf -print | wc -l); then
        echo "trouble listing files... giving up on '$dir'"
        problems+=" '$dir': trouble;"
        return 1
    fi
    if [ $newer -gt 0 ]; then
        # some files or directories newer than $cf
        need2review="$need2review '$dir'"
        return 1
    else
        # no files or directories newer than $cf
        return 0
    fi
}


###################################################################
######################### main loop ###############################

# build 'dirs', a list of directories to process, watching for errors
dirs=()
problems=""
if [ $mode == "create" ]; then
    # for 'create' mode, each argument must be a directory
    for arg in "$@"
    do
        if [ -d "$arg" ]; then
            dirs=("${dirs[@]}" "$arg")
        else
            problems+="ERROR: not a directory: $arg;"
        fi
    done
else
    # for other modes, verify at least one $cf in each argument/subdirectory
    for arg in "$@"
    do
        # only consider directories; ignore all others
        if [ -d "$arg" ]; then
            # Here it gets tricky; we use 'find' to look for all $cf in any
            # subdir of argument "$arg", and 'sed' to trim each pathname
            # to subdir name; we need to temporarily modify IFS so each line
            # of output becomes one element of the array 'dirs'
            # (to support pathnames w/ embedded whitespace).
            # The 'sort' makes it easier to see progress in long runs.
            oldIFS="$IFS"; IFS=$'\n'
            found=($(find "$arg" -name $cf | sed s+/$cf++ | sort))
            IFS="$oldIFS"

            # did we find anything? if so, add them to the list
            if [ ${#found[@]} -gt 0 ]; then
                dirs=("${dirs[@]}" "${found[@]}")
            else
                problems+="ERROR: no $cf found in this directory: $arg;"
            fi
        else
            echo "WARNING: not a directory: $arg"
        fi
    done
fi

if [ "$problems" ]; then
    echo "$problems" | tr \; \\n
    exit 4
fi

# prepare to loop over the directories
ndirs=${#dirs[@]}
echo "$mode $cf in each of $ndirs directories..."
    
# loop over all dirs, processing each directory independently
for dir in "${dirs[@]}"
do
    echo $ndirs directories remaining to examine
    if cd "$dir"; then
        echo "examine directory '$dir'"...
    else
        echo "cannot cd '$dir'; ...skipping"
        problems+=" '$dir': error with 'cd';"
        continue
    fi
    
    case $mode in
        create) mode-create;;
        expand) mode-expand;;
        verify) mode-verify;;
        subset) mode-subset;;
        sample) mode-sample;;
        accept) mode-accept;;
        review) mode-review;;
        update) mode-update;;
        *) ;;
    esac
    
    echo -n "done... popping back to "
    cd -   # pop back to where we were before cd $dir

    let ndirs--
    echo
done

# Check the results of the above loop.
if [ $mode == review ]; then
    if [ "$need2review" == "" ]; then
        echo "No directories appear to need verification."
    else
        echo "NEED VERIFICATION; run the following":
        echo "$progname verify $need2review"
    fi
fi

if [ "$problems" ]; then
    echo "Warning: errors or changes found in these directories:"
    echo "$problems" | tr \; \\n
    echo "$additions" | tr \; \\n
    if [ "$need2accept" ]; then
        echo "IFF those changes were acceptable, run the following:"
        echo "$progname accept $need2accept"
    fi
    exit 5
else
    echo "NO PROBLEMS FOUND."
    if [ "$need2accept" ]; then
        echo "BUT, some files were added in some directories."
        echo "$additions" | tr \; \\n
        echo "Thus, the following command is recommended:"
        echo $progname accept $need2accept

        echo
        echo "The following command is also recommended:"
        if [ $progname == hashcheck ]; then
            echo metacheck verify $need2accept
        else
            echo hashcheck verify $need2accept
        fi
        # technically not a failure, but exit non-zero to get your attention
        exit 6
    else
        # no problems, and no new files needing acceptance
        exit 0
    fi
    # unreached; the preceding if statement should always exit
    echo ERROR: reached unreachable point 1; exit 98
fi
# unreached; the preceding if statement should always exit
echo ERROR: reached unreachable point 2; exit 99
